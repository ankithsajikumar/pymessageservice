"""
Django settings for pymessageservice project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import environ
import os

# Home page
HOME_URL = "https://hacksawrazor.pythonanywhere.com"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Loading environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'messenger4hacksawrazor.pythonanywhere.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'rest_framework',
    "django_sso_client_oauth",
    'messagesApp.apps.MessagesConfig',
    'smartIntents',
    'smartDevices',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pymessageservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pymessageservice.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'users.User'

LOGIN_URL = '/admin/login/'

# SSO details
SSO_BASE_URL = env('SSO_BASE_URL')
SSO_CLIENT_ID = env('SSO_CLIENT_ID')
SSO_CLIENT_SECRET = env('SSO_CLIENT_SECRET')
SSO_REDIRECT_URI = env('SSO_REDIRECT_URI')

SSO_CONFIG = {
     "BASE_URL": env('SSO_BASE_URL'),
     "CLIENT_ID": env('SSO_CLIENT_ID'),
     "CLIENT_SECRET": env('SSO_CLIENT_SECRET'),
     "REDIRECT_URI": env('SSO_REDIRECT_URI'),
     "SCOPE": ["read", "write"],
     "LOGIN_REDIRECT": "/admin/",
     "LOGIN_ERROR_REDIRECT": "/admin/login/",
}

AUTH_JWKS = {
    "ISSUER": env('SSO_BASE_URL'),
    "AUDIENCE": "default-resource-service", # keep this till we make it dynamic
    "CACHE_TTL": 300,
 }

# Enabling redirects to http endpoints in dev servers
if DEBUG:
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "django_auth_jwks.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,  # Allows the use of other loggers like 'django.db.backends'
        'formatters': {
            'verbose': {
                'format': '%(asctime)s %(levelname)s %(name)s %(process)d %(thread)d %(message)s'
            },
            'simple': {
                'format': '%(levelname)s %(message)s'
            },
        },
        'handlers': {
            'logfile': {
                'level': 'DEBUG',
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'filename': BASE_DIR / 'logs/feature.log',
                'when': 'midnight',  # Rotate logs at midnight
                'interval': 1,  # Every 1 day
                'backupCount': 7,  # Keep 7 days of logs
                'formatter': 'verbose',
            },
            'console': {
                'level': 'DEBUG',  # Minimum level of messages to log
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            },
        },
        'loggers': {
            'django': {
                'handlers': ['logfile'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'django.utils.autoreload': {
                'level': 'ERROR',  # Suppress logs below ERROR level
                'handlers': ['console', 'logfile'],
                'propagate': False,  # Prevent propagation to parent loggers
            },
        },
        'root': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG',  # Log messages at this level and higher
        },
    }
